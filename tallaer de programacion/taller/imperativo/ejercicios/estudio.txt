-----------ordenacion de vectores-----------
-----
procedure insercion(var v:vec; dimL:integer);
var
	i,j:integer; 
	actual:oficina;
begin
	for i:=2 to dimL do begin
		actual:=v[i];
		j:=i-1;
		while(j>0) and (v[j].identificacion>actual.identificacion) do begin
			v[j+1]:=v[j];
			j:=j-1
		end;
		v[j+1]:=actual;
	end;
end;

-----
procedure seleccion(var v:vec; dimL:integer);
var
	i,p,j:integer;
	item:oficina;
begin
	for i:= 1 to dimL-1 do begin
		p:=i;
		for j:= i+1 to dimL do
			if (v[j].identificacion < v[p].identificacion) then p:=j;
		item:=v[p];
		v[p]:=v[i];
		v[i]:=item;
	end;
end;

------------vectores recursivos----------------
------
procedure busqueda(v: vec; diml:integer);
	procedure busquedaDicotomica (v: vec; ini,fin: integer; dato:integer; var pos: integer);
	var
		mid: integer;
	begin
		mid:=(fin+ini) div 2;
		if (ini>fin) then pos:=-1
		else if (v[mid].codIdentificacion<dato) then busquedaDicotomica(v,mid+1,fin,dato,pos)
		else if (v[mid].codIdentificacion>dato) then busquedaDicotomica(v,ini,mid-1,dato,pos)
		else pos:=mid;
	end;
var
	ini,fin,dato,pos:integer;
begin
	ini:=1; fin:=diml;
	write('Ingrese el numero a buscar: ');
	readln(dato);
	busquedaDicotomica(v,ini,fin,dato,pos);
	writeln('dni: ',v[pos].dni)
end;








-----
procedure cargarVectorRecursivo(var v:vec; var dimL:integer);
var
	caracter:char;
begin
	writeln('Ingrese uncaracter: ');
	readLn(caracter);
	if(caracter <> '.') and (dimL<dimF) then begin
		dimL:=dimL+1;
		v[dimL]:=caracter;
		cargarVectorRecursivo(v,dimL);
	end;
end;

-----
  
procedure leerVectorRecursivo(v:vec;dimL:integer;var i:integer);
begin
	if (dimL = 0) then writeln('--- Vector sin elementos ---')
	else if (i<=dimL)and(v[i]<>'.')then begin
		writeln(v[i]);
		i:=i+1;
		leerVectorRecursivo(v,dimL,i);
	end;
end;


-----
function maximo( v:vec; dimL:integer):integer;
	function max(var maxi,i:integer):integer;
	begin
		if(i<=dimL)then begin
			if(v[i]>maxi) then maxi:=v[i];
			i:=i+1;
			max(maxi,i);
		end;
	max:=maxi;
	end;
var
	i,maxi:integer;
begin
	i:=1;
	maxi:=-9999;
	maximo:=max(maxi,i);
end;



------------listasrecursivas---------------
------
	
Procedure imprimir (l:lista);
Begin
    if (l <> nil) then begin
        writeln ('caracter: ',l^.dato);
        l:= l^.sig;
        imprimir (l);
    end;
End;

-----

function maximo(l:lista):integer;
	function mayor(a,b:integer):integer;
	begin
		if(a>b) then
			mayor:=a
		else
			mayor:=b;
	end;

begin
	if(l=nil) then
		maximo:=-9999
	else
		maximo:=mayor(l^.dato,maximo(l^.sig));
end;


-----
function minimo(l:lista):integer;
	function menor(a,b:integer):integer;
	begin
		if(a<b) then
			menor:=a
		else
			menor:=b;
	end;

begin
	if(l=nil) then
		minimo:=9999
	else
		minimo:=menor(l^.dato,minimo(l^.sig));
end;


------
function esta(l:lista; n:integer):boolean;
begin
	if(l<>nil) then begin
		if (l^.dato = n) then
			esta:=true
		else
			esta:=esta(l^.sig,n);
		end
	else
		esta:=false;
end;


-----------arboles-------------
-----
function masGrande(a:arbol):integer;
	begin
		if(a = nil) then masGrande:= -1
		else if( a^.HD = nil) then masGrande:= a^.dato.num
			else masGrande:=masGrande(a^.HD);
	end;



-----
function masChico(a:arbol):arbol;
	begin
		if ((a = nil) or (a^.HI = nil)) then masChico:= a
		else  masChico:= masChico(a^.HI)
	end;



-----
procedure existeNumSocio(a:arbol);
	function buscar(a:arbol; x:integer):boolean;
	begin
		if(a = nil) then buscar:=false
		else if (x = a^.dato.num) then buscar:= true
			else if(x < a^.dato.num) then buscar:=buscar(a^.HI,x)
				else
					buscar:=buscar(a^.HD,x);
	end;


-----
	procedure imprimirEnOrdenCreciete(a1:arbol1);
	begin
	if(a1<>nil) then begin
		imprimirEnOrdenCreciete(a1^.hi);
		writeln('codProducto a1: ',a1^.dato.codProducto);
		imprimirEnOrdenCreciete(a1^.hd);
	end;
	end;


-----
procedure informarEntreDosValores(a:arbol);
	procedure entre(a:arbol; vi,vf:integer);
	begin
		if(a=nil)then writeln('Lista vacia.');
		if(a <> nil)then begin
			if(a^.dato.legajo >= vi) then
				if(a^.dato.legajo <= vf) then begin
					writeln('DNI: ', a^.dato.dni,'. ano ingreso: ', a^.dato.anoIngreso);
					entre(a^.hi,vi,vf);
					entre(a^.hd,vi,vf);
				end
			else
				entre(a^.hi,vi,vf)
			else
				entre(a^.hd,vi,vf)
		end
	end;
var
	vi,vf:integer;
begin
	writeln('Ingrese el valor inicial: ');
	readln(vi);
	writeln('Ingrese el valor final: ');
	readln(vf);
	entre(a,vi,vf);
end;




-------------merge--------------

------
procedure merge(v:vec; var lm:lista);

	procedure AgregarAtras (var l, ult: lista; p:pelicula); 
	   var  nuevo: lista;
	   begin 
		 new (nuevo); nuevo^.datos:= p; nuevo^.sig := nil;
		 if (l = nil) then l:= nuevo
					  else ult^.sig := nuevo;
		 ult := nuevo;
	   end;
	
	procedure minimo(var v:vec; var pmin:pelicula);
	var
		indicemin,i:integer;
	begin
		pmin.codPelicula:=valorGrande;
		for i:=1 to maxGen do begin
			if(v[i]<>nil)then
				if(v[i]^.datos.codPelicula <= pmin.codPelicula) then begin
					indicemin:=i;
					pmin:=v[i]^.datos;
				end;
		end;
		if(pmin.codPelicula<>valorGrande)then v[indicemin]:=v[indicemin]^.sig;
	end;
var
	pmin:pelicula;
	ult:lista;
begin
	lm:=nil;
	minimo(v,pmin);
	while(pmin.codPelicula <> valorGrande)do begin
		agregarAtras(lm,ult,pmin);
		minimo(v,pmin);
	end;
end;




-----
procedure puntoBMergeAcumulador(v:vec; var lm:listaAc);

	procedure agregarAtras(var l,ult:listaAc; tv:totVenta);
	var
		nuevo:listaAc;
	begin
		new(nuevo);
		nuevo^.datos:=tv;
		nuevo^.sig:=nil;
		if (l=nil) then
			l:=nuevo
		else
			ult^.sig:=nuevo;
		ult:=nuevo;
	end;


	procedure minimo(var v:vec; var vmin:venta);
	var
		indicemin,i:integer;
	begin
		vmin.codProducto:=valorGrande;
		indicemin:=-1;
		for i:=1 to dimF do begin
			if(v[i]<>nil)then
				if(v[i]^.datos.codProducto <= vmin.codProducto) then begin
					indicemin:=i;
					vmin:=v[i]^.datos;
				end;
		end;
		if(vmin.codProducto<>valorGrande)then begin
			v[indicemin]:=v[indicemin]^.sig;
		end;
	end;
var
	vmin:venta;
	ult:listaAc;
	
	actual:totVenta;
begin
	lm:=nil;
	minimo(v,vmin);
	while(vmin.codProducto <> valorGrande) do begin
		actual.codProducto:=vmin.codProducto; actual.total:=0;
		while((vmin.codProducto <> valorGrande)and(vmin.codProducto=actual.codProducto))do begin
			actual.total:=actual.total + vmin.cantVendida;
			minimo(v,vmin);
		end;
		agregarAtras(lm,ult,actual);
	end;
end;
